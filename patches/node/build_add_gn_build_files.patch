From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Jeremy Apthorp <nornagon@nornagon.net>
Date: Tue, 26 Feb 2019 17:07:45 -0800
Subject: build: add GN build files

This adds GN build files for Node, so we don't have to build with GYP.

diff --git a/BUILD.gn b/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..a47875642d8f825c84ba1e82e3892a97e98e76e4
--- /dev/null
+++ b/BUILD.gn
@@ -0,0 +1,438 @@
+import("//v8/gni/v8.gni")
+import("node.gni")
+
+declare_args() {
+  # Enable the V8 inspector protocol for use with node.
+  node_enable_inspector = true
+
+  # Build node with SSL support.
+  # The variable is called "openssl" for parity with node's GYP build.
+  node_use_openssl = true
+
+  # Use the specified path to system CA (PEM format) in addition to
+  # the BoringSSL supplied CA store or compiled-in Mozilla CA copy.
+  node_openssl_system_ca_path = ""
+
+  # Initialize v8 platform during node.js startup.
+  # NB. this must be turned off in Electron, because Electron initializes the
+  # v8 platform itself.
+  node_use_v8_platform = false
+
+  # Build with DTrace support.
+  node_use_dtrace = false
+
+  # Build with ETW support.
+  node_use_etw = false
+
+  # Build JavaScript in lib/ with DCHECK macros.
+  node_debug_lib = false
+
+  # Custom build tag.
+  node_tag = ""
+
+  # V8 options to pass, see `node --v8-options` for examples
+  node_v8_options = ""
+
+  # Provide a custom URL prefix for the `process.release` properties
+  # `sourceUrl` and `headersUrl`. When compiling a release build, this will
+  # default to https://nodejs.org/download/release/')
+  node_release_urlbase = ""
+
+  # Allows embedders to override the NODE_MODULE_VERSION define
+  node_module_version = ""
+
+  # Allows downstream packagers (eg. Linux distributions) to build Electron against system shared libraries.
+  use_system_cares = false
+  use_system_nghttp2 = false
+  use_system_llhttp = false
+  use_system_histogram = false
+}
+
+if (is_linux) {
+ import("//build/config/linux/pkg_config.gni")
+ if (use_system_cares) {
+  pkg_config("cares") {
+    packages = [ "libcares" ]
+  }
+ }
+ if (use_system_nghttp2) {
+  pkg_config("nghttp2") {
+    packages = [ "libnghttp2" ]
+  }
+ }
+}
+
+assert(!node_use_dtrace, "node_use_dtrace not supported in GN")
+assert(!node_use_etw, "node_use_etw not supported in GN")
+
+assert(!node_enable_inspector || node_use_openssl,
+       "node_enable_inspector requires node_use_openssl")
+
+config("node_internals") {
+  defines = [ "NODE_WANT_INTERNALS=1" ]
+}
+
+node_files = read_file("filenames.json", "json")
+library_files = node_files.library_files
+
+copy("node_js2c_inputs") {
+  sources = library_files
+  outputs = [
+    "$target_gen_dir/js2c_inputs/{{source_target_relative}}",
+  ]
+}
+
+chdir_action("node_js2c") {
+  deps = [
+    "//electron:generate_config_gypi",
+    ":node_js2c_inputs",
+  ]
+  config_gypi = [ "$root_gen_dir/config.gypi" ]
+  inputs = library_files + config_gypi
+  outputs = [
+    "$target_gen_dir/node_javascript.cc",
+  ]
+
+  cwd = "$target_gen_dir/js2c_inputs"
+  script = "tools/js2c.py"
+  args = library_files + rebase_path(config_gypi) + ["--target"] + rebase_path(outputs)
+}
+
+config("node_features") {
+  defines = []
+  if (node_enable_inspector) {
+    defines += [ "HAVE_INSPECTOR=1" ]
+  } else {
+    defines += [ "HAVE_INSPECTOR=0" ]
+  }
+  if (node_use_openssl) {
+    defines += [ "HAVE_OPENSSL=1" ]
+  } else {
+    defines += [ "HAVE_OPENSSL=0" ]
+  }
+  if (v8_enable_i18n_support) {
+    defines += [ "NODE_HAVE_I18N_SUPPORT=1" ]
+  } else {
+    defines += [ "NODE_HAVE_I18N_SUPPORT=0" ]
+  }
+  if (node_use_v8_platform) {
+    defines += [ "NODE_USE_V8_PLATFORM=1" ]
+  } else {
+    defines += [ "NODE_USE_V8_PLATFORM=0" ]
+  }
+}
+
+config("node_lib_config") {
+  include_dirs = [ "src" ]
+
+  # FIXME(deepak1556): include paths should be corrected,
+  # refer https://docs.google.com/presentation/d/1oxNHaVjA9Gn_rTzX6HIpJHP7nXRua_0URXxxJ3oYRq0/edit#slide=id.g71ecd450e_2_702
+  cflags = [ "-Wno-microsoft-include" ]
+
+  configs = [ ":node_features" ]
+
+  if (is_debug) {
+    defines = [ "DEBUG" ]
+  }
+}
+
+config("node_internal_config") {
+  visibility = [
+    ":*",
+    "src/inspector:*",
+  ]
+  defines = [
+    "NODE_WANT_INTERNALS=1",
+    "NODE_IMPLEMENTATION",
+  ]
+  if (node_module_version != "") {
+    defines += [ "NODE_MODULE_VERSION=" + node_module_version ]
+  }
+  if (is_component_build) {
+    defines += [
+      "NODE_SHARED_MODE",
+    ]
+  }
+
+  if (target_cpu == "x86") {
+    node_arch = "ia32"
+  } else {
+    node_arch = target_cpu
+  }
+  defines += [ "NODE_ARCH=\"$node_arch\"" ]
+
+  if (target_os == "win") {
+    node_platform = "win32"
+  } else if (target_os == "mac") {
+    node_platform = "darwin"
+  } else {
+    node_platform = target_os
+  }
+  defines += [ "NODE_PLATFORM=\"$node_platform\"" ]
+
+  if (is_win) {
+    defines += [
+      "NOMINMAX",
+      "_UNICODE=1",
+    ]
+  } else {
+    defines += [ "__POSIX__" ]
+  }
+
+  if (node_tag != "") {
+    defines += [ "NODE_TAG=\"$node_tag\"" ]
+  }
+  if (node_v8_options != "") {
+    defines += [ "NODE_V8_OPTIONS=\"$node_v8_options\"" ]
+  }
+  if (node_release_urlbase != "") {
+    defines += [ "NODE_RELEASE_URLBASE=\"$node_release_urlbase\"" ]
+  }
+
+  if (node_use_openssl) {
+    defines += [
+      "NODE_OPENSSL_SYSTEM_CERT_PATH=\"$node_openssl_system_ca_path\"",
+      "EVP_CTRL_CCM_SET_TAG=EVP_CTRL_GCM_SET_TAG",
+    ]
+  }
+}
+
+executable("overlapped-checker") {
+  sources = []
+  if (is_win) {
+    sources += [ "test/overlapped-checker/main_win.c" ]
+  } else {
+    sources += [ "test/overlapped-checker/main_unix.c" ]
+  }
+}
+
+component("node_lib") {
+  deps = [
+    ":node_js2c",
+    "deps/googletest:gtest",
+    "deps/uvwasi",
+    "//third_party/zlib",
+    "//third_party/brotli:dec",
+    "//third_party/brotli:enc",
+    "//v8:v8_libplatform",
+  ]
+  if (use_system_cares) {
+    configs += [ ":cares" ]
+  } else {
+    deps += [ "deps/cares" ]
+  }
+  if (use_system_nghttp2) {
+    configs += [ ":nghttp2" ]
+  } else {
+    deps += [ "deps/nghttp2" ]
+  }
+  public_deps = [
+    "deps/uv",
+    "//electron:electron_js2c",
+    "//v8",
+  ]
+  configs += [ ":node_internal_config" ]
+  public_configs = [ ":node_lib_config" ]
+  include_dirs = [ "src" ]
+  libs = []
+  if (use_system_llhttp) {
+    libs += [ "llhttp" ]
+  } else {
+    deps += [ "deps/llhttp" ]
+  }
+  if (use_system_histogram) {
+    libs += [ "hdr_histogram" ]
+    include_dirs += [ "/usr/include/hdr" ]
+  } else {
+    deps += [ "deps/histogram" ]
+  }
+  frameworks = []
+  cflags_cc = [
+    "-Wno-deprecated-declarations",
+    "-Wno-implicit-fallthrough",
+    "-Wno-return-type",
+    "-Wno-sometimes-uninitialized",
+    "-Wno-string-plus-int",
+    "-Wno-unused-function",
+    "-Wno-unused-label",
+    "-Wno-unused-private-field",
+    "-Wno-unused-variable",
+    "-Wno-shadow",
+  ]
+
+  if (v8_enable_i18n_support) {
+    deps += [ "//third_party/icu" ]
+  }
+
+  sources = node_files.node_sources
+  sources += [
+    "$root_gen_dir/electron_natives.cc",
+    "$target_gen_dir/node_javascript.cc",
+    "src/node_code_cache_stub.cc",
+    "src/node_snapshot_stub.cc",
+  ]
+
+  if (is_win) {
+    libs += [ "psapi.lib" ]
+  }
+  if (is_mac) {
+    frameworks += [ "CoreFoundation.framework" ]
+  }
+
+  if (node_enable_inspector) {
+    sources += [
+      "src/inspector_agent.cc",
+      "src/inspector_agent.h",
+      "src/inspector_io.cc",
+      "src/inspector_io.h",
+      "src/inspector_js_api.cc",
+      "src/inspector_profiler.cc",
+      "src/inspector_socket.cc",
+      "src/inspector_socket.h",
+      "src/inspector_socket_server.cc",
+      "src/inspector_socket_server.h",
+    ]
+    deps += [ "src/inspector" ]
+  }
+
+  if (node_use_openssl) {
+    deps += [ "//third_party/boringssl" ]
+    sources += [
+      "src/crypto/crypto_aes.cc",
+      "src/crypto/crypto_aes.h",
+      "src/crypto/crypto_bio.cc",
+      "src/crypto/crypto_bio.h",
+      "src/crypto/crypto_cipher.cc",
+      "src/crypto/crypto_cipher.h",
+      "src/crypto/crypto_clienthello-inl.h",
+      "src/crypto/crypto_clienthello.cc",
+      "src/crypto/crypto_clienthello.h",
+      "src/crypto/crypto_common.cc",
+      "src/crypto/crypto_common.h",
+      "src/crypto/crypto_context.cc",
+      "src/crypto/crypto_context.h",
+      "src/crypto/crypto_dh.cc",
+      "src/crypto/crypto_dh.h",
+      "src/crypto/crypto_dsa.cc",
+      "src/crypto/crypto_dsa.h",
+      "src/crypto/crypto_ec.cc",
+      "src/crypto/crypto_ec.h",
+      "src/crypto/crypto_groups.h",
+      "src/crypto/crypto_hash.cc",
+      "src/crypto/crypto_hash.h",
+      "src/crypto/crypto_hkdf.cc",
+      "src/crypto/crypto_hkdf.h",
+      "src/crypto/crypto_hmac.cc",
+      "src/crypto/crypto_hmac.h",
+      "src/crypto/crypto_keygen.cc",
+      "src/crypto/crypto_keygen.h",
+      "src/crypto/crypto_keys.cc",
+      "src/crypto/crypto_keys.h",
+      "src/crypto/crypto_pbkdf2.cc",
+      "src/crypto/crypto_pbkdf2.h",
+      "src/crypto/crypto_random.cc",
+      "src/crypto/crypto_random.h",
+      "src/crypto/crypto_rsa.cc",
+      "src/crypto/crypto_rsa.h",
+      "src/crypto/crypto_scrypt.cc",
+      "src/crypto/crypto_scrypt.h",
+      "src/crypto/crypto_sig.cc",
+      "src/crypto/crypto_sig.h",
+      "src/crypto/crypto_spkac.cc",
+      "src/crypto/crypto_spkac.h",
+      "src/crypto/crypto_timing.cc",
+      "src/crypto/crypto_timing.h",
+      "src/crypto/crypto_tls.cc",
+      "src/crypto/crypto_tls.h",
+      "src/crypto/crypto_util.cc",
+      "src/crypto/crypto_util.h",
+      "src/crypto/crypto_x509.cc",
+      "src/crypto/crypto_x509.h",
+      "src/node_crypto.cc",
+      "src/node_crypto.h",
+    ]
+    cflags_cc += [ "-Wno-sign-compare" ]
+  }
+}
+
+##### node_headers
+
+node_headers_dir = "$root_gen_dir/node_headers"
+
+header_group_index = 0
+header_groups = []
+foreach(header_group, node_files.headers) {
+  copy("node_headers_${header_group_index}") {
+    sources = header_group.files
+    outputs = [
+      "$node_headers_dir/${header_group.dest_dir}/{{source_file_part}}",
+    ]
+  }
+  header_groups += [ ":node_headers_${header_group_index}" ]
+  header_group_index += 1
+}
+
+copy("zlib_headers") {
+  sources = [
+    "deps/zlib/zconf.h",
+    "deps/zlib/zlib.h",
+  ]
+  outputs = [
+    "$node_headers_dir/include/node/{{source_file_part}}",
+  ]
+}
+
+copy("node_gypi_headers") {
+  deps = [
+    "//electron:generate_config_gypi",
+  ]
+  sources = [
+    "$root_gen_dir/config.gypi",
+    "common.gypi",
+  ]
+  outputs = [
+    "$node_headers_dir/include/node/{{source_file_part}}",
+  ]
+}
+
+action("node_version_header") {
+  inputs = [
+    "src/node_version.h",
+  ]
+  outputs = [
+    "$node_headers_dir/include/node/node_version.h",
+  ]
+  script = "tools/generate_node_version_header.py"
+  args = [ rebase_path("src/node_version.h"), rebase_path(outputs[0]) ]
+  if (node_module_version != "") {
+    args += [ "$node_module_version" ]
+  }
+}
+
+action("tar_headers") {
+  deps = [
+    ":copy_headers",
+  ]
+  outputs = [
+    "$root_gen_dir/node_headers.tar.gz",
+  ]
+  script = "tools/tar.py"
+  args = [
+    rebase_path("$root_gen_dir/node_headers"),
+    rebase_path(outputs[0]),
+  ]
+}
+
+group("copy_headers") {
+  public_deps = header_groups + [
+                  ":zlib_headers",
+                  ":node_gypi_headers",
+                  ":node_version_header",
+                ]
+}
+
+group("headers") {
+  public_deps = [
+    ":tar_headers",
+  ]
+}
diff --git a/deps/cares/BUILD.gn b/deps/cares/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..71a37834f4e693c190eb7e7d04e3f5ce67c487ad
--- /dev/null
+++ b/deps/cares/BUILD.gn
@@ -0,0 +1,134 @@
+config("cares_config") {
+  include_dirs = [ "include", "src/lib" ]
+}
+static_library("cares") {
+  defines = [ "CARES_STATICLIB" ]
+  include_dirs = [ "include" ]
+  public_configs = [ ":cares_config" ]
+
+  libs = []
+  cflags_c = [
+    "-Wno-logical-not-parentheses",
+    "-Wno-implicit-fallthrough",
+    "-Wno-sign-compare",
+  ]
+
+  sources = [
+    "include/ares.h",
+    "include/ares_dns.h",
+    "include/ares_nameser.h",
+    "include/ares_rules.h",
+    "include/ares_version.h",
+    "src/lib/ares__addrinfo2hostent.c",
+    "src/lib/ares__addrinfo_localhost.c",
+    "src/lib/ares_android.c",
+    "src/lib/ares_cancel.c",
+    "src/lib/ares__close_sockets.c",
+    "src/lib/ares_create_query.c",
+    "src/lib/ares_data.c",
+    "src/lib/ares_data.h",
+    "src/lib/ares_destroy.c",
+    "src/lib/ares_expand_name.c",
+    "src/lib/ares_expand_string.c",
+    "src/lib/ares_fds.c",
+    "src/lib/ares_free_hostent.c",
+    "src/lib/ares_free_string.c",
+    "src/lib/ares_freeaddrinfo.c",
+    "src/lib/ares_getenv.h",
+    "src/lib/ares_getaddrinfo.c",
+    "src/lib/ares_gethostbyaddr.c",
+    "src/lib/ares_gethostbyname.c",
+    "src/lib/ares__get_hostent.c",
+    "src/lib/ares_getnameinfo.c",
+    "src/lib/ares_getsock.c",
+    "src/lib/ares_init.c",
+    "src/lib/ares_ipv6.h",
+    "src/lib/ares_library_init.c",
+    "src/lib/ares_library_init.h",
+    "src/lib/ares_llist.c",
+    "src/lib/ares_llist.h",
+    "src/lib/ares_mkquery.c",
+    "src/lib/ares_nameser.h",
+    "src/lib/ares_nowarn.c",
+    "src/lib/ares_nowarn.h",
+    "src/lib/ares_options.c",
+    "src/lib/ares__parse_into_addrinfo.c",
+    "src/lib/ares_parse_aaaa_reply.c",
+    "src/lib/ares_parse_a_reply.c",
+    "src/lib/ares_parse_caa_reply.c",
+    "src/lib/ares_parse_mx_reply.c",
+    "src/lib/ares_parse_naptr_reply.c",
+    "src/lib/ares_parse_ns_reply.c",
+    "src/lib/ares_parse_ptr_reply.c",
+    "src/lib/ares_parse_soa_reply.c",
+    "src/lib/ares_parse_srv_reply.c",
+    "src/lib/ares_parse_txt_reply.c",
+    "src/lib/ares_parse_uri_reply.c",
+    "src/lib/ares_platform.h",
+    "src/lib/ares_private.h",
+    "src/lib/ares_process.c",
+    "src/lib/ares_query.c",
+    "src/lib/ares__read_line.c",
+    "src/lib/ares__readaddrinfo.c",
+    "src/lib/ares_search.c",
+    "src/lib/ares_send.c",
+    "src/lib/ares_setup.h",
+    "src/lib/ares__sortaddrinfo.c",
+    "src/lib/ares_strcasecmp.c",
+    "src/lib/ares_strcasecmp.h",
+    "src/lib/ares_strdup.c",
+    "src/lib/ares_strdup.h",
+    "src/lib/ares_strerror.c",
+    "src/lib/ares_strsplit.c",
+    "src/lib/ares_timeout.c",
+    "src/lib/ares__timeval.c",
+    "src/lib/ares_version.c",
+    "src/lib/ares_writev.c",
+    "src/lib/ares_writev.h",
+    "src/lib/bitncmp.c",
+    "src/lib/bitncmp.h",
+    "src/lib/inet_net_pton.c",
+    "src/lib/inet_ntop.c",
+    "src/lib/ares_inet_net_pton.h",
+    "src/lib/setup_once.h",
+    "src/tools/ares_getopt.c",
+    "src/tools/ares_getopt.h",
+  ]
+
+  if (!is_win) {
+    defines += [
+      "_DARWIN_USE_64_BIT_INODE=1",
+      "_LARGEFILE_SOURCE",
+      "_FILE_OFFSET_BITS=64",
+      "_GNU_SOURCE",
+    ]
+  }
+
+  if (is_win) {
+    defines += [ "CARES_PULL_WS2TCPIP_H=1" ]
+    include_dirs += [ "config/win32" ]
+    sources += [
+      "src/lib/ares_getenv.c",
+      "src/lib/ares_iphlpapi.h",
+      "src/lib/ares_platform.c",
+      "src/lib/config-win32.h",
+      "src/lib/windows_port.c",
+    ]
+    libs += [
+      "ws2_32.lib",
+      "iphlpapi.lib",
+    ]
+  } else {
+    defines += [ "HAVE_CONFIG_H" ]
+  }
+
+  if (is_linux) {
+    include_dirs += [ "config/linux" ]
+    sources += [ "config/linux/ares_config.h" ]
+  }
+
+  if (is_mac) {
+    include_dirs += [ "config/darwin" ]
+    sources += [ "config/darwin/ares_config.h" ]
+  }
+}
diff --git a/deps/googletest/BUILD.gn b/deps/googletest/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..0daf8c006cef89e76d7eccec3e924bd2718021c9
--- /dev/null
+++ b/deps/googletest/BUILD.gn
@@ -0,0 +1,64 @@
+config("gtest_config") {
+  include_dirs = [ "include" ]
+  defines = [ "UNIT_TEST" ]
+}
+
+static_library("gtest") {
+  include_dirs = [
+    "include",
+    "." # src
+  ]
+
+  public_configs = [ ":gtest_config" ]
+
+  cflags_cc = [
+    "-Wno-c++98-compat-extra-semi",
+    "-Wno-unused-const-variable",
+    "-Wno-unreachable-code-return",
+  ]
+
+  defines = [
+    "GTEST_HAS_POSIX_RE=0",
+    "GTEST_LANG_CXX11=1",
+  ]
+
+  sources = [
+    "include/gtest/gtest_pred_impl.h",
+    "include/gtest/gtest_prod.h",
+    "include/gtest/gtest-death-test.h",
+    "include/gtest/gtest-matchers.h",
+    "include/gtest/gtest-message.h",
+    "include/gtest/gtest-param-test.h",
+    "include/gtest/gtest-printers.h",
+    "include/gtest/gtest-spi.h",
+    "include/gtest/gtest-test-part.h",
+    "include/gtest/gtest-typed-test.h",
+    "include/gtest/gtest.h",
+    "include/gtest/internal/gtest-death-test-internal.h",
+    "include/gtest/internal/gtest-filepath.h",
+    "include/gtest/internal/gtest-internal.h",
+    "include/gtest/internal/gtest-param-util.h",
+    "include/gtest/internal/gtest-port-arch.h",
+    "include/gtest/internal/gtest-port.h",
+    "include/gtest/internal/gtest-string.h",
+    "include/gtest/internal/gtest-type-util.h",
+    "include/gtest/internal/custom/gtest-port.h",
+    "include/gtest/internal/custom/gtest-printers.h",
+    "include/gtest/internal/custom/gtest.h",
+    "src/gtest-all.cc",
+    "src/gtest-death-test.cc",
+    "src/gtest-filepath.cc",
+    "src/gtest-internal-inl.h",
+    "src/gtest-matchers.cc",
+    "src/gtest-port.cc",
+    "src/gtest-printers.cc",
+    "src/gtest-test-part.cc",
+    "src/gtest-typed-test.cc",
+    "src/gtest.cc",
+  ]
+}
+
+static_library("gtest_main") {
+  deps = [ ":gtest" ]
+  sources = [ "src/gtest_main.cc" ]
+}
diff --git a/deps/histogram/BUILD.gn b/deps/histogram/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..8ba89a379fa2937b4b2fa5092f18727c7d0788a6
--- /dev/null
+++ b/deps/histogram/BUILD.gn
@@ -0,0 +1,19 @@
+config("histogram_config") {
+  include_dirs = [ "src" ]
+
+  cflags = [
+    "-Wno-implicit-function-declaration",
+    "-Wno-incompatible-pointer-types",
+    "-Wno-unused-function",
+    "-Wno-atomic-alignment",
+  ]
+}
+
+static_library("histogram") {
+  public_configs = [ ":histogram_config" ]
+
+  sources = [
+    "src/hdr_histogram.c",
+    "src/hdr_histogram.h",
+  ]
+}
diff --git a/deps/llhttp/BUILD.gn b/deps/llhttp/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..fb000f8ee7647c375bc190d1729d67bb7770d109
--- /dev/null
+++ b/deps/llhttp/BUILD.gn
@@ -0,0 +1,15 @@
+config("llhttp_config") {
+  include_dirs = [ "include" ]
+  cflags = [ "-Wno-unreachable-code" ]
+}
+
+static_library("llhttp") {
+  include_dirs = [ "include" ]
+  public_configs = [ ":llhttp_config" ]
+  cflags_c = [ "-Wno-implicit-fallthrough" ]
+  sources = [
+    "src/api.c",
+    "src/http.c",
+    "src/llhttp.c",
+  ]
+}
diff --git a/deps/nghttp2/BUILD.gn b/deps/nghttp2/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..9abde472d88923db835b12982b7f2ccb1f260196
--- /dev/null
+++ b/deps/nghttp2/BUILD.gn
@@ -0,0 +1,47 @@
+config("nghttp2_config") {
+  defines = [ "NGHTTP2_STATICLIB" ]
+  include_dirs = [ "lib/includes" ]
+}
+static_library("nghttp2") {
+  public_configs = [ ":nghttp2_config" ]
+  defines = [
+    "_U_",
+    "BUILDING_NGHTTP2",
+    "NGHTTP2_STATICLIB",
+    "HAVE_CONFIG_H",
+  ]
+  include_dirs = [ "lib/includes" ]
+
+  cflags_c = [
+    "-Wno-implicit-function-declaration",
+    "-Wno-implicit-fallthrough",
+    "-Wno-string-plus-int",
+    "-Wno-unreachable-code-return",
+    "-Wno-unused-but-set-variable",
+  ]
+
+  sources = [
+    "lib/nghttp2_buf.c",
+    "lib/nghttp2_callbacks.c",
+    "lib/nghttp2_debug.c",
+    "lib/nghttp2_frame.c",
+    "lib/nghttp2_hd.c",
+    "lib/nghttp2_hd_huffman.c",
+    "lib/nghttp2_hd_huffman_data.c",
+    "lib/nghttp2_helper.c",
+    "lib/nghttp2_http.c",
+    "lib/nghttp2_map.c",
+    "lib/nghttp2_mem.c",
+    "lib/nghttp2_npn.c",
+    "lib/nghttp2_option.c",
+    "lib/nghttp2_outbound_item.c",
+    "lib/nghttp2_pq.c",
+    "lib/nghttp2_priority_spec.c",
+    "lib/nghttp2_queue.c",
+    "lib/nghttp2_rcbuf.c",
+    "lib/nghttp2_session.c",
+    "lib/nghttp2_stream.c",
+    "lib/nghttp2_submit.c",
+    "lib/nghttp2_version.c",
+  ]
+}
diff --git a/deps/uv/BUILD.gn b/deps/uv/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..d6bed57461820ce08391fc424a1f842bd282fa75
--- /dev/null
+++ b/deps/uv/BUILD.gn
@@ -0,0 +1,196 @@
+config("libuv_config") {
+  include_dirs = [ "include" ]
+
+  defines = []
+
+  if (is_linux) {
+    defines += [ "_POSIX_C_SOURCE=200112" ]
+  }
+  if (!is_win) {
+    defines += [
+      "_LARGEFILE_SOURCE",
+      "_FILE_OFFSET_BITS=64",
+    ]
+  }
+  if (is_mac) {
+    defines += [ "_DARWIN_USE_64_BIT_INODE=1" ]
+  }
+}
+
+static_library("uv") {
+  include_dirs = [
+    "include",
+    "src",
+  ]
+
+  public_configs = [ ":libuv_config" ]
+
+  ldflags = []
+
+  defines = []
+
+  # This only has an effect on Windows, where it will cause libuv's symbols to be exported in node.lib
+  defines += [ "BUILDING_UV_SHARED=1" ]
+
+  cflags_c = [
+    "-Wno-incompatible-pointer-types",
+    "-Wno-bitwise-op-parentheses",
+    "-Wno-implicit-fallthrough",
+    "-Wno-implicit-function-declaration",
+    "-Wno-missing-braces",
+    "-Wno-sign-compare",
+    "-Wno-sometimes-uninitialized",
+    "-Wno-string-conversion",
+    "-Wno-switch",
+    "-Wno-unused-function",
+    "-Wno-unused-variable",
+    "-Wno-unreachable-code",
+    "-Wno-unreachable-code-return",
+    "-Wno-unused-but-set-variable",
+    "-Wno-shadow",
+  ]
+
+  libs = []
+
+  sources = [
+    "include/uv.h",
+    "include/uv/errno.h",
+    "include/uv/threadpool.h",
+    "include/uv/tree.h",
+    "include/uv/version.h",
+    "src/fs-poll.c",
+    "src/heap-inl.h",
+    "src/idna.c",
+    "src/idna.h",
+    "src/inet.c",
+    "src/queue.h",
+    "src/random.c",
+    "src/strscpy.c",
+    "src/strscpy.h",
+    "src/threadpool.c",
+    "src/timer.c",
+    "src/uv-common.c",
+    "src/uv-common.h",
+    "src/uv-data-getter-setters.c",
+    "src/version.c",
+  ]
+
+  if (is_win) {
+    defines += [ "_GNU_SOURCE" ]
+    sources += [
+      "include/uv/win.h",
+      "src/win/async.c",
+      "src/win/atomicops-inl.h",
+      "src/win/core.c",
+      "src/win/detect-wakeup.c",
+      "src/win/dl.c",
+      "src/win/error.c",
+      "src/win/fs-event.c",
+      "src/win/fs.c",
+      "src/win/getaddrinfo.c",
+      "src/win/getnameinfo.c",
+      "src/win/handle-inl.h",
+      "src/win/handle.c",
+      "src/win/internal.h",
+      "src/win/loop-watcher.c",
+      "src/win/pipe.c",
+      "src/win/poll.c",
+      "src/win/process-stdio.c",
+      "src/win/process.c",
+      "src/win/req-inl.h",
+      "src/win/signal.c",
+      "src/win/snprintf.c",
+      "src/win/stream-inl.h",
+      "src/win/stream.c",
+      "src/win/tcp.c",
+      "src/win/thread.c",
+      "src/win/tty.c",
+      "src/win/udp.c",
+      "src/win/util.c",
+      "src/win/winapi.c",
+      "src/win/winapi.h",
+      "src/win/winsock.c",
+      "src/win/winsock.h",
+    ]
+    libs += [
+      "advapi32.lib",
+      "iphlpapi.lib",
+      "psapi.lib",
+      "shell32.lib",
+      "user32.lib",
+      "userenv.lib",
+      "ws2_32.lib",
+    ]
+  } else {
+    sources += [
+      "include/uv/aix.h",
+      "include/uv/bsd.h",
+      "include/uv/darwin.h",
+      "include/uv/linux.h",
+      "include/uv/sunos.h",
+      "include/uv/unix.h",
+      "src/unix/async.c",
+      "src/unix/atomic-ops.h",
+      "src/unix/core.c",
+      "src/unix/dl.c",
+      "src/unix/fs.c",
+      "src/unix/getaddrinfo.c",
+      "src/unix/getnameinfo.c",
+      "src/unix/internal.h",
+      "src/unix/loop-watcher.c",
+      "src/unix/loop.c",
+      "src/unix/pipe.c",
+      "src/unix/poll.c",
+      "src/unix/process.c",
+      "src/unix/pthread-fixes.c",
+      "src/unix/random-devurandom.c",
+      "src/unix/signal.c",
+      "src/unix/spinlock.h",
+      "src/unix/stream.c",
+      "src/unix/tcp.c",
+      "src/unix/thread.c",
+      "src/unix/tty.c",
+      "src/unix/udp.c",
+    ]
+    libs += [ "m" ]
+    ldflags += [ "-pthread" ]
+  }
+  if (is_mac || is_linux) {
+    sources += [ "src/unix/proctitle.c" ]
+  }
+  if (is_mac) {
+    sources += [
+      "src/unix/darwin-proctitle.c",
+      "src/unix/darwin.c",
+      "src/unix/fsevents.c",
+      "src/unix/random-getentropy.c",
+    ]
+    defines += [
+      "_DARWIN_USE_64_BIT_INODE=1",
+      "_DARWIN_UNLIMITED_SELECT=1",
+    ]
+  }
+  if (is_linux) {
+    defines += [ "_GNU_SOURCE" ]
+    sources += [
+      "src/unix/epoll.c",
+      "src/unix/linux-core.c",
+      "src/unix/linux-inotify.c",
+      "src/unix/linux-syscalls.c",
+      "src/unix/linux-syscalls.h",
+      "src/unix/procfs-exepath.c",
+      "src/unix/random-getrandom.c",
+      "src/unix/random-sysctl-linux.c",
+    ]
+    libs += [
+      "dl",
+      "rt",
+    ]
+  }
+  if (is_mac) {  # is_bsd
+    sources += [
+      "src/unix/bsd-ifaddrs.c",
+      "src/unix/kqueue.c",
+    ]
+  }
+}
diff --git a/deps/uvwasi/BUILD.gn b/deps/uvwasi/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..2c9d2826c85bdd033f1df1d6188df6369a765c07
--- /dev/null
+++ b/deps/uvwasi/BUILD.gn
@@ -0,0 +1,38 @@
+config("uvwasi_config") {
+  include_dirs = [ "include" ]
+}
+
+static_library("uvwasi") {
+  include_dirs = [
+    "include",
+    "src",
+  ]
+
+  defines = []
+  if (is_linux) {
+    defines += [
+      "_GNU_SOURCE",
+      "_POSIX_C_SOURCE=200112"
+    ]
+  }
+
+  deps = [ "../../deps/uv" ]
+
+  public_configs = [ ":uvwasi_config" ]
+
+  cflags_c = []
+  if (!is_win) {
+    cflags_c += [ "-fvisibility=hidden" ]
+  }
+
+  sources = [
+    "src/clocks.c",
+    "src/fd_table.c",
+    "src/path_resolver.c",
+    "src/poll_oneoff.c",
+    "src/uv_mapping.c",
+    "src/uvwasi.c",
+    "src/wasi_rights.c",
+    "src/wasi_serdes.c"
+  ]
+}
diff --git a/filenames.json b/filenames.json
new file mode 100644
index 0000000000000000000000000000000000000000..13fd1469ef0aa33853ddc6f31eda5b15f6312138
--- /dev/null
+++ b/filenames.json
@@ -0,0 +1,625 @@
+// This file is automatically generated by generate_gn_filenames_json.py
+// DO NOT EDIT
+{
+  "headers": [
+    {
+      "dest_dir": "include/node/",
+      "files": [
+        "src/js_native_api.h",
+        "src/js_native_api_types.h",
+        "src/node.h",
+        "src/node_api.h",
+        "src/node_api_types.h",
+        "src/node_buffer.h",
+        "src/node_object_wrap.h"
+      ]
+    },
+    {
+      "dest_dir": "include/node//",
+      "files": [
+        "//v8/include/v8-array-buffer.h",
+        "//v8/include/v8-callbacks.h",
+        "//v8/include/v8-container.h",
+        "//v8/include/v8-context.h",
+        "//v8/include/v8-cppgc.h",
+        "//v8/include/v8-data.h",
+        "//v8/include/v8-date.h",
+        "//v8/include/v8-debug.h",
+        "//v8/include/v8-embedder-heap.h",
+        "//v8/include/v8-embedder-state-scope.h",
+        "//v8/include/v8-exception.h",
+        "//v8/include/v8-extension.h",
+        "//v8/include/v8-external.h",
+        "//v8/include/v8-fast-api-calls.h",
+        "//v8/include/v8-forward.h",
+        "//v8/include/v8-function-callback.h",
+        "//v8/include/v8-function.h",
+        "//v8/include/v8-initialization.h",
+        "//v8/include/v8-inspector-protocol.h",
+        "//v8/include/v8-inspector.h",
+        "//v8/include/v8-internal.h",
+        "//v8/include/v8-isolate.h",
+        "//v8/include/v8-json.h",
+        "//v8/include/v8-local-handle.h",
+        "//v8/include/v8-locker.h",
+        "//v8/include/v8-maybe.h",
+        "//v8/include/v8-memory-span.h",
+        "//v8/include/v8-message.h",
+        "//v8/include/v8-metrics.h",
+        "//v8/include/v8-microtask-queue.h",
+        "//v8/include/v8-microtask.h",
+        "//v8/include/v8-object.h",
+        "//v8/include/v8-persistent-handle.h",
+        "//v8/include/v8-platform.h",
+        "//v8/include/v8-primitive-object.h",
+        "//v8/include/v8-primitive.h",
+        "//v8/include/v8-profiler.h",
+        "//v8/include/v8-promise.h",
+        "//v8/include/v8-proxy.h",
+        "//v8/include/v8-regexp.h",
+        "//v8/include/v8-script.h",
+        "//v8/include/v8-snapshot.h",
+        "//v8/include/v8-statistics.h",
+        "//v8/include/v8-template.h",
+        "//v8/include/v8-traced-handle.h",
+        "//v8/include/v8-typed-array.h",
+        "//v8/include/v8-unwinder-state.h",
+        "//v8/include/v8-unwinder.h",
+        "//v8/include/v8-util.h",
+        "//v8/include/v8-value-serializer-version.h",
+        "//v8/include/v8-value-serializer.h",
+        "//v8/include/v8-value.h",
+        "//v8/include/v8-version-string.h",
+        "//v8/include/v8-version.h",
+        "//v8/include/v8-wasm-trap-handler-posix.h",
+        "//v8/include/v8-wasm-trap-handler-win.h",
+        "//v8/include/v8-wasm.h",
+        "//v8/include/v8-weak-callback-info.h",
+        "//v8/include/v8.h",
+        "//v8/include/v8config.h"
+      ]
+    },
+    {
+      "dest_dir": "include/node//libplatform/",
+      "files": [
+        "//v8/include/libplatform/libplatform-export.h",
+        "//v8/include/libplatform/libplatform.h",
+        "//v8/include/libplatform/v8-tracing.h"
+      ]
+    },
+    {
+      "dest_dir": "include/node//cppgc/",
+      "files": [
+        "//v8/include/cppgc/common.h"
+      ]
+    },
+    {
+      "dest_dir": "include/node//",
+      "files": [
+        "deps/uv/include/uv.h"
+      ]
+    },
+    {
+      "dest_dir": "include/node//uv/",
+      "files": [
+        "deps/uv/include/uv/aix.h",
+        "deps/uv/include/uv/android-ifaddrs.h",
+        "deps/uv/include/uv/bsd.h",
+        "deps/uv/include/uv/darwin.h",
+        "deps/uv/include/uv/errno.h",
+        "deps/uv/include/uv/linux.h",
+        "deps/uv/include/uv/os390.h",
+        "deps/uv/include/uv/posix.h",
+        "deps/uv/include/uv/stdint-msvc2008.h",
+        "deps/uv/include/uv/sunos.h",
+        "deps/uv/include/uv/threadpool.h",
+        "deps/uv/include/uv/tree.h",
+        "deps/uv/include/uv/unix.h",
+        "deps/uv/include/uv/version.h",
+        "deps/uv/include/uv/win.h"
+      ]
+    }
+  ],
+  "library_files": [
+    "lib/constants.js",
+    "lib/net.js",
+    "lib/trace_events.js",
+    "lib/events.js",
+    "lib/repl.js",
+    "lib/util.js",
+    "lib/dgram.js",
+    "lib/vm.js",
+    "lib/stream.js",
+    "lib/child_process.js",
+    "lib/assert.js",
+    "lib/_tls_wrap.js",
+    "lib/test.js",
+    "lib/http2.js",
+    "lib/inspector.js",
+    "lib/os.js",
+    "lib/_http_server.js",
+    "lib/console.js",
+    "lib/perf_hooks.js",
+    "lib/readline.js",
+    "lib/punycode.js",
+    "lib/_http_incoming.js",
+    "lib/https.js",
+    "lib/_stream_wrap.js",
+    "lib/domain.js",
+    "lib/dns.js",
+    "lib/_http_client.js",
+    "lib/diagnostics_channel.js",
+    "lib/tty.js",
+    "lib/_http_agent.js",
+    "lib/timers.js",
+    "lib/_http_outgoing.js",
+    "lib/querystring.js",
+    "lib/_tls_common.js",
+    "lib/module.js",
+    "lib/_stream_passthrough.js",
+    "lib/_stream_transform.js",
+    "lib/worker_threads.js",
+    "lib/sys.js",
+    "lib/_stream_duplex.js",
+    "lib/path.js",
+    "lib/_http_common.js",
+    "lib/string_decoder.js",
+    "lib/cluster.js",
+    "lib/v8.js",
+    "lib/crypto.js",
+    "lib/wasi.js",
+    "lib/_stream_readable.js",
+    "lib/zlib.js",
+    "lib/url.js",
+    "lib/tls.js",
+    "lib/_stream_writable.js",
+    "lib/async_hooks.js",
+    "lib/process.js",
+    "lib/http.js",
+    "lib/buffer.js",
+    "lib/fs.js",
+    "lib/util/types.js",
+    "lib/timers/promises.js",
+    "lib/path/win32.js",
+    "lib/path/posix.js",
+    "lib/stream/consumers.js",
+    "lib/stream/promises.js",
+    "lib/stream/web.js",
+    "lib/internal/constants.js",
+    "lib/internal/abort_controller.js",
+    "lib/internal/net.js",
+    "lib/internal/v8_prof_processor.js",
+    "lib/internal/event_target.js",
+    "lib/internal/inspector_async_hook.js",
+    "lib/internal/validators.js",
+    "lib/internal/linkedlist.js",
+    "lib/internal/cli_table.js",
+    "lib/internal/repl.js",
+    "lib/internal/util.js",
+    "lib/internal/histogram.js",
+    "lib/internal/error_serdes.js",
+    "lib/internal/dgram.js",
+    "lib/internal/child_process.js",
+    "lib/internal/assert.js",
+    "lib/internal/fixed_queue.js",
+    "lib/internal/blocklist.js",
+    "lib/internal/v8_prof_polyfill.js",
+    "lib/internal/options.js",
+    "lib/internal/worker.js",
+    "lib/internal/dtrace.js",
+    "lib/internal/idna.js",
+    "lib/internal/watchdog.js",
+    "lib/internal/encoding.js",
+    "lib/internal/tty.js",
+    "lib/internal/freeze_intrinsics.js",
+    "lib/internal/timers.js",
+    "lib/internal/heap_utils.js",
+    "lib/internal/querystring.js",
+    "lib/internal/js_stream_socket.js",
+    "lib/internal/errors.js",
+    "lib/internal/priority_queue.js",
+    "lib/internal/freelist.js",
+    "lib/internal/blob.js",
+    "lib/internal/socket_list.js",
+    "lib/internal/socketaddress.js",
+    "lib/internal/promise_hooks.js",
+    "lib/internal/stream_base_commons.js",
+    "lib/internal/url.js",
+    "lib/internal/async_hooks.js",
+    "lib/internal/http.js",
+    "lib/internal/buffer.js",
+    "lib/internal/trace_events_async_hooks.js",
+    "lib/internal/v8/startup_snapshot.js",
+    "lib/internal/test_runner/test.js",
+    "lib/internal/test_runner/harness.js",
+    "lib/internal/test_runner/utils.js",
+    "lib/internal/test_runner/tap_stream.js",
+    "lib/internal/crypto/sig.js",
+    "lib/internal/crypto/rsa.js",
+    "lib/internal/crypto/aes.js",
+    "lib/internal/crypto/util.js",
+    "lib/internal/crypto/scrypt.js",
+    "lib/internal/crypto/random.js",
+    "lib/internal/crypto/keys.js",
+    "lib/internal/crypto/cfrg.js",
+    "lib/internal/crypto/x509.js",
+    "lib/internal/crypto/certificate.js",
+    "lib/internal/crypto/ec.js",
+    "lib/internal/crypto/keygen.js",
+    "lib/internal/crypto/mac.js",
+    "lib/internal/crypto/diffiehellman.js",
+    "lib/internal/crypto/hkdf.js",
+    "lib/internal/crypto/cipher.js",
+    "lib/internal/crypto/hash.js",
+    "lib/internal/crypto/pbkdf2.js",
+    "lib/internal/crypto/webcrypto.js",
+    "lib/internal/crypto/hashnames.js",
+    "lib/internal/cluster/shared_handle.js",
+    "lib/internal/cluster/round_robin_handle.js",
+    "lib/internal/cluster/worker.js",
+    "lib/internal/cluster/primary.js",
+    "lib/internal/cluster/utils.js",
+    "lib/internal/cluster/child.js",
+    "lib/internal/webstreams/compression.js",
+    "lib/internal/webstreams/util.js",
+    "lib/internal/webstreams/writablestream.js",
+    "lib/internal/webstreams/readablestream.js",
+    "lib/internal/webstreams/queuingstrategies.js",
+    "lib/internal/webstreams/encoding.js",
+    "lib/internal/webstreams/transformstream.js",
+    "lib/internal/webstreams/adapters.js",
+    "lib/internal/webstreams/transfer.js",
+    "lib/internal/bootstrap/loaders.js",
+    "lib/internal/bootstrap/pre_execution.js",
+    "lib/internal/bootstrap/node.js",
+    "lib/internal/bootstrap/environment.js",
+    "lib/internal/bootstrap/switches/does_not_own_process_state.js",
+    "lib/internal/bootstrap/switches/is_not_main_thread.js",
+    "lib/internal/bootstrap/switches/does_own_process_state.js",
+    "lib/internal/bootstrap/switches/is_main_thread.js",
+    "lib/internal/test/binding.js",
+    "lib/internal/test/transfer.js",
+    "lib/internal/util/types.js",
+    "lib/internal/util/inspector.js",
+    "lib/internal/util/comparisons.js",
+    "lib/internal/util/debuglog.js",
+    "lib/internal/util/inspect.js",
+    "lib/internal/util/iterable_weak_map.js",
+    "lib/internal/util/parse_args/utils.js",
+    "lib/internal/util/parse_args/parse_args.js",
+    "lib/internal/streams/add-abort-signal.js",
+    "lib/internal/streams/compose.js",
+    "lib/internal/streams/duplexify.js",
+    "lib/internal/streams/destroy.js",
+    "lib/internal/streams/legacy.js",
+    "lib/internal/streams/passthrough.js",
+    "lib/internal/streams/operators.js",
+    "lib/internal/streams/readable.js",
+    "lib/internal/streams/from.js",
+    "lib/internal/streams/writable.js",
+    "lib/internal/streams/state.js",
+    "lib/internal/streams/buffer_list.js",
+    "lib/internal/streams/end-of-stream.js",
+    "lib/internal/streams/utils.js",
+    "lib/internal/streams/transform.js",
+    "lib/internal/streams/lazy_transform.js",
+    "lib/internal/streams/duplex.js",
+    "lib/internal/streams/pipeline.js",
+    "lib/internal/readline/interface.js",
+    "lib/internal/readline/utils.js",
+    "lib/internal/readline/emitKeypressEvents.js",
+    "lib/internal/readline/callbacks.js",
+    "lib/internal/repl/history.js",
+    "lib/internal/repl/utils.js",
+    "lib/internal/repl/await.js",
+    "lib/internal/legacy/processbinding.js",
+    "lib/internal/assert/calltracker.js",
+    "lib/internal/assert/assertion_error.js",
+    "lib/internal/http2/util.js",
+    "lib/internal/http2/core.js",
+    "lib/internal/http2/compat.js",
+    "lib/internal/per_context/messageport.js",
+    "lib/internal/per_context/primordials.js",
+    "lib/internal/per_context/domexception.js",
+    "lib/internal/vm/module.js",
+    "lib/internal/tls/secure-pair.js",
+    "lib/internal/tls/parse-cert-string.js",
+    "lib/internal/tls/secure-context.js",
+    "lib/internal/child_process/serialization.js",
+    "lib/internal/debugger/inspect_repl.js",
+    "lib/internal/debugger/inspect_client.js",
+    "lib/internal/debugger/inspect.js",
+    "lib/internal/worker/io.js",
+    "lib/internal/worker/js_transferable.js",
+    "lib/internal/main/repl.js",
+    "lib/internal/main/print_help.js",
+    "lib/internal/main/eval_string.js",
+    "lib/internal/main/check_syntax.js",
+    "lib/internal/main/prof_process.js",
+    "lib/internal/main/test_runner.js",
+    "lib/internal/main/worker_thread.js",
+    "lib/internal/main/mksnapshot.js",
+    "lib/internal/main/inspect.js",
+    "lib/internal/main/eval_stdin.js",
+    "lib/internal/main/run_main_module.js",
+    "lib/internal/modules/run_main.js",
+    "lib/internal/modules/package_json_reader.js",
+    "lib/internal/modules/esm/module_job.js",
+    "lib/internal/modules/esm/assert.js",
+    "lib/internal/modules/esm/fetch_module.js",
+    "lib/internal/modules/esm/translators.js",
+    "lib/internal/modules/esm/resolve.js",
+    "lib/internal/modules/esm/create_dynamic_module.js",
+    "lib/internal/modules/esm/load.js",
+    "lib/internal/modules/esm/handle_process_exit.js",
+    "lib/internal/modules/esm/initialize_import_meta.js",
+    "lib/internal/modules/esm/module_map.js",
+    "lib/internal/modules/esm/get_format.js",
+    "lib/internal/modules/esm/formats.js",
+    "lib/internal/modules/esm/loader.js",
+    "lib/internal/modules/cjs/helpers.js",
+    "lib/internal/modules/cjs/loader.js",
+    "lib/internal/source_map/source_map.js",
+    "lib/internal/source_map/prepare_stack_trace.js",
+    "lib/internal/source_map/source_map_cache.js",
+    "lib/internal/dns/promises.js",
+    "lib/internal/dns/utils.js",
+    "lib/internal/fs/watchers.js",
+    "lib/internal/fs/promises.js",
+    "lib/internal/fs/read_file_context.js",
+    "lib/internal/fs/rimraf.js",
+    "lib/internal/fs/sync_write_stream.js",
+    "lib/internal/fs/dir.js",
+    "lib/internal/fs/streams.js",
+    "lib/internal/fs/utils.js",
+    "lib/internal/fs/cp/cp.js",
+    "lib/internal/fs/cp/cp-sync.js",
+    "lib/internal/perf/nodetiming.js",
+    "lib/internal/perf/usertiming.js",
+    "lib/internal/perf/performance_entry.js",
+    "lib/internal/perf/performance.js",
+    "lib/internal/perf/timerify.js",
+    "lib/internal/perf/utils.js",
+    "lib/internal/perf/observe.js",
+    "lib/internal/perf/event_loop_delay.js",
+    "lib/internal/perf/resource_timing.js",
+    "lib/internal/perf/event_loop_utilization.js",
+    "lib/internal/policy/manifest.js",
+    "lib/internal/policy/sri.js",
+    "lib/internal/process/task_queues.js",
+    "lib/internal/process/per_thread.js",
+    "lib/internal/process/warning.js",
+    "lib/internal/process/policy.js",
+    "lib/internal/process/promises.js",
+    "lib/internal/process/signal.js",
+    "lib/internal/process/execution.js",
+    "lib/internal/process/esm_loader.js",
+    "lib/internal/process/report.js",
+    "lib/internal/process/worker_thread_only.js",
+    "lib/internal/console/constructor.js",
+    "lib/internal/console/global.js",
+    "lib/assert/strict.js",
+    "lib/dns/promises.js",
+    "lib/fs/promises.js",
+    "//v8/tools/splaytree.mjs",
+    "//v8/tools/codemap.mjs",
+    "//v8/tools/consarray.mjs",
+    "//v8/tools/csvparser.mjs",
+    "//v8/tools/profile.mjs",
+    "//v8/tools/profile_view.mjs",
+    "//v8/tools/logreader.mjs",
+    "//v8/tools/arguments.mjs",
+    "//v8/tools/tickprocessor.mjs",
+    "//v8/tools/sourcemap.mjs",
+    "//v8/tools/tickprocessor-driver.mjs",
+    "deps/acorn/acorn/dist/acorn.js",
+    "deps/acorn/acorn-walk/dist/walk.js",
+    "deps/cjs-module-lexer/lexer.js",
+    "deps/cjs-module-lexer/dist/lexer.js",
+    "deps/undici/undici.js"
+  ],
+  "node_sources": [
+    "src/api/async_resource.cc",
+    "src/api/callback.cc",
+    "src/api/embed_helpers.cc",
+    "src/api/encoding.cc",
+    "src/api/environment.cc",
+    "src/api/exceptions.cc",
+    "src/api/hooks.cc",
+    "src/api/utils.cc",
+    "src/async_wrap.cc",
+    "src/cares_wrap.cc",
+    "src/connect_wrap.cc",
+    "src/connection_wrap.cc",
+    "src/debug_utils.cc",
+    "src/env.cc",
+    "src/fs_event_wrap.cc",
+    "src/handle_wrap.cc",
+    "src/heap_utils.cc",
+    "src/histogram.cc",
+    "src/js_native_api.h",
+    "src/js_native_api_types.h",
+    "src/js_native_api_v8.cc",
+    "src/js_native_api_v8.h",
+    "src/js_native_api_v8_internals.h",
+    "src/js_stream.cc",
+    "src/json_utils.cc",
+    "src/js_udp_wrap.cc",
+    "src/module_wrap.cc",
+    "src/node.cc",
+    "src/node_api.cc",
+    "src/node_binding.cc",
+    "src/node_blob.cc",
+    "src/node_buffer.cc",
+    "src/node_config.cc",
+    "src/node_constants.cc",
+    "src/node_contextify.cc",
+    "src/node_credentials.cc",
+    "src/node_dir.cc",
+    "src/node_env_var.cc",
+    "src/node_errors.cc",
+    "src/node_external_reference.cc",
+    "src/node_file.cc",
+    "src/node_http_parser.cc",
+    "src/node_http2.cc",
+    "src/node_i18n.cc",
+    "src/node_main_instance.cc",
+    "src/node_messaging.cc",
+    "src/node_metadata.cc",
+    "src/node_native_module.cc",
+    "src/node_native_module_env.cc",
+    "src/node_options.cc",
+    "src/node_os.cc",
+    "src/node_perf.cc",
+    "src/node_platform.cc",
+    "src/node_postmortem_metadata.cc",
+    "src/node_process_events.cc",
+    "src/node_process_methods.cc",
+    "src/node_process_object.cc",
+    "src/node_report.cc",
+    "src/node_report_module.cc",
+    "src/node_report_utils.cc",
+    "src/node_serdes.cc",
+    "src/node_snapshotable.cc",
+    "src/node_sockaddr.cc",
+    "src/node_stat_watcher.cc",
+    "src/node_symbols.cc",
+    "src/node_task_queue.cc",
+    "src/node_trace_events.cc",
+    "src/node_types.cc",
+    "src/node_url.cc",
+    "src/node_url_tables.cc",
+    "src/node_util.cc",
+    "src/node_v8.cc",
+    "src/node_wasi.cc",
+    "src/node_watchdog.cc",
+    "src/node_worker.cc",
+    "src/node_zlib.cc",
+    "src/pipe_wrap.cc",
+    "src/process_wrap.cc",
+    "src/signal_wrap.cc",
+    "src/spawn_sync.cc",
+    "src/stream_base.cc",
+    "src/stream_pipe.cc",
+    "src/stream_wrap.cc",
+    "src/string_bytes.cc",
+    "src/string_decoder.cc",
+    "src/tcp_wrap.cc",
+    "src/timers.cc",
+    "src/timer_wrap.cc",
+    "src/tracing/agent.cc",
+    "src/tracing/node_trace_buffer.cc",
+    "src/tracing/node_trace_writer.cc",
+    "src/tracing/trace_event.cc",
+    "src/tracing/traced_value.cc",
+    "src/tty_wrap.cc",
+    "src/udp_wrap.cc",
+    "src/util.cc",
+    "src/uv.cc",
+    "src/aliased_buffer.h",
+    "src/aliased_struct.h",
+    "src/aliased_struct-inl.h",
+    "src/async_wrap.h",
+    "src/async_wrap-inl.h",
+    "src/base_object.h",
+    "src/base_object-inl.h",
+    "src/base64.h",
+    "src/base64-inl.h",
+    "src/callback_queue.h",
+    "src/callback_queue-inl.h",
+    "src/connect_wrap.h",
+    "src/connection_wrap.h",
+    "src/debug_utils.h",
+    "src/debug_utils-inl.h",
+    "src/env.h",
+    "src/env-inl.h",
+    "src/handle_wrap.h",
+    "src/histogram.h",
+    "src/histogram-inl.h",
+    "src/js_stream.h",
+    "src/json_utils.h",
+    "src/large_pages/node_large_page.cc",
+    "src/large_pages/node_large_page.h",
+    "src/memory_tracker.h",
+    "src/memory_tracker-inl.h",
+    "src/module_wrap.h",
+    "src/node.h",
+    "src/node_api.h",
+    "src/node_api_types.h",
+    "src/node_binding.h",
+    "src/node_blob.h",
+    "src/node_buffer.h",
+    "src/node_constants.h",
+    "src/node_context_data.h",
+    "src/node_contextify.h",
+    "src/node_dir.h",
+    "src/node_errors.h",
+    "src/node_external_reference.h",
+    "src/node_file.h",
+    "src/node_file-inl.h",
+    "src/node_http_common.h",
+    "src/node_http_common-inl.h",
+    "src/node_http2.h",
+    "src/node_http2_state.h",
+    "src/node_i18n.h",
+    "src/node_internals.h",
+    "src/node_main_instance.h",
+    "src/node_mem.h",
+    "src/node_mem-inl.h",
+    "src/node_messaging.h",
+    "src/node_metadata.h",
+    "src/node_mutex.h",
+    "src/node_native_module.h",
+    "src/node_native_module_env.h",
+    "src/node_object_wrap.h",
+    "src/node_options.h",
+    "src/node_options-inl.h",
+    "src/node_perf.h",
+    "src/node_perf_common.h",
+    "src/node_platform.h",
+    "src/node_process.h",
+    "src/node_process-inl.h",
+    "src/node_report.h",
+    "src/node_revert.h",
+    "src/node_root_certs.h",
+    "src/node_snapshotable.h",
+    "src/node_snapshot_builder.h",
+    "src/node_sockaddr.h",
+    "src/node_sockaddr-inl.h",
+    "src/node_stat_watcher.h",
+    "src/node_union_bytes.h",
+    "src/node_url.h",
+    "src/node_version.h",
+    "src/node_v8.h",
+    "src/node_v8_platform-inl.h",
+    "src/node_wasi.h",
+    "src/node_watchdog.h",
+    "src/node_worker.h",
+    "src/pipe_wrap.h",
+    "src/req_wrap.h",
+    "src/req_wrap-inl.h",
+    "src/spawn_sync.h",
+    "src/stream_base.h",
+    "src/stream_base-inl.h",
+    "src/stream_pipe.h",
+    "src/stream_wrap.h",
+    "src/string_bytes.h",
+    "src/string_decoder.h",
+    "src/string_decoder-inl.h",
+    "src/string_search.h",
+    "src/tcp_wrap.h",
+    "src/tracing/agent.h",
+    "src/tracing/node_trace_buffer.h",
+    "src/tracing/node_trace_writer.h",
+    "src/tracing/trace_event.h",
+    "src/tracing/trace_event_common.h",
+    "src/tracing/traced_value.h",
+    "src/timer_wrap.h",
+    "src/timer_wrap-inl.h",
+    "src/tty_wrap.h",
+    "src/udp_wrap.h",
+    "src/util.h",
+    "src/util-inl.h",
+    "//v8/include/v8.h"
+  ]
+}
diff --git a/node.gni b/node.gni
new file mode 100644
index 0000000000000000000000000000000000000000..9b1a4048a4a64c36d88de0bbe1a548c906aaa22c
--- /dev/null
+++ b/node.gni
@@ -0,0 +1,29 @@
+# Run an action with a given working directory. Behaves identically to the
+# action() target type, with the exception that it changes directory before
+# running the script.
+#
+# Parameters:
+#   cwd [required]: Directory to change to before running the script.
+template("chdir_action") {
+  action(target_name) {
+    forward_variables_from(invoker,
+                           "*",
+                           [
+                             "script",
+                             "args",
+                           ])
+    assert(defined(cwd), "Need cwd in $target_name")
+    script = "//electron/build/run-in-dir.py"
+    if (defined(sources)) {
+      sources += [ invoker.script ]
+    } else {
+      assert(defined(inputs))
+      inputs += [ invoker.script ]
+    }
+    args = [
+      rebase_path(cwd),
+      rebase_path(invoker.script),
+    ]
+    args += invoker.args
+  }
+}
diff --git a/src/inspector/BUILD.gn b/src/inspector/BUILD.gn
new file mode 100644
index 0000000000000000000000000000000000000000..d1d6b51e8c0c5bc6a5d09e217eb3048361d9d591
--- /dev/null
+++ b/src/inspector/BUILD.gn
@@ -0,0 +1,199 @@
+import("//v8/gni/v8.gni")
+
+inspector_protocol_dir = "../../tools/inspector_protocol"
+
+_protocol_generated = [
+  "protocol/Forward.h",
+  "protocol/Protocol.cpp",
+  "protocol/Protocol.h",
+  "protocol/NodeWorker.cpp",
+  "protocol/NodeWorker.h",
+  "protocol/NodeTracing.cpp",
+  "protocol/NodeTracing.h",
+  "protocol/NodeRuntime.cpp",
+  "protocol/NodeRuntime.h",
+]
+
+# These are from node_protocol_config.json
+# These convoluted path hacks are to work around the fact that node.js is very
+# confused about what paths are in its includes, without changing node at all.
+# Hopefully, keying everything in this file off the paths that are in
+# node_protocol_config.json will mean that the paths stay in sync.
+inspector_protocol_package = "src/node/inspector/protocol"
+inspector_protocol_output = "node/inspector/protocol"
+
+config("inspector_config") {
+  include_dirs = [
+    "$target_gen_dir",
+    "$target_gen_dir/src",
+  ]
+
+  configs = [ "../..:node_features" ]
+}
+
+source_set("inspector") {
+  sources = [
+    "main_thread_interface.cc",
+    "main_thread_interface.h",
+    "node_string.cc",
+    "node_string.h",
+    "runtime_agent.cc",
+    "runtime_agent.h",
+    "tracing_agent.cc",
+    "tracing_agent.h",
+    "worker_agent.cc",
+    "worker_agent.h",
+    "worker_inspector.cc",
+    "worker_inspector.h",
+  ]
+  sources += rebase_path(_protocol_generated,
+                         ".",
+                         "$target_gen_dir/$inspector_protocol_package/..")
+  include_dirs = [
+    "//v8/include",
+    "..",
+  ]
+  deps = [
+    ":protocol_generated_sources",
+    ":v8_inspector_compress_protocol_json",
+    "../../deps/uv",
+    "//third_party/icu:icuuc",
+  ]
+  configs += [ "../..:node_internal_config" ]
+  public_configs = [ ":inspector_config" ]
+}
+
+# This based on the template from //v8/../inspector_protocol.gni
+action("protocol_generated_sources") {
+  # This is to ensure that the output directory exists--the code generator
+  # doesn't create it.
+  write_file("$target_gen_dir/$inspector_protocol_package/.dummy", "")
+  script = "$inspector_protocol_dir/code_generator.py"
+
+  inputs = [
+    "$target_gen_dir/node_protocol_config.json",
+    "$target_gen_dir/src/node_protocol.json",
+    "$inspector_protocol_dir/lib/base_string_adapter_cc.template",
+    "$inspector_protocol_dir/lib/base_string_adapter_h.template",
+    "$inspector_protocol_dir/lib/Allocator_h.template",
+    "$inspector_protocol_dir/lib/Array_h.template",
+    "$inspector_protocol_dir/lib/DispatcherBase_cpp.template",
+    "$inspector_protocol_dir/lib/DispatcherBase_h.template",
+    "$inspector_protocol_dir/lib/ErrorSupport_cpp.template",
+    "$inspector_protocol_dir/lib/ErrorSupport_h.template",
+    "$inspector_protocol_dir/lib/Forward_h.template",
+    "$inspector_protocol_dir/lib/FrontendChannel_h.template",
+    "$inspector_protocol_dir/lib/Maybe_h.template",
+    "$inspector_protocol_dir/lib/Object_cpp.template",
+    "$inspector_protocol_dir/lib/Object_h.template",
+    "$inspector_protocol_dir/lib/Parser_cpp.template",
+    "$inspector_protocol_dir/lib/Parser_h.template",
+    "$inspector_protocol_dir/lib/Protocol_cpp.template",
+    "$inspector_protocol_dir/lib/ValueConversions_h.template",
+    "$inspector_protocol_dir/lib/Values_cpp.template",
+    "$inspector_protocol_dir/lib/Values_h.template",
+    "$inspector_protocol_dir/templates/Exported_h.template",
+    "$inspector_protocol_dir/templates/Imported_h.template",
+    "$inspector_protocol_dir/templates/TypeBuilder_cpp.template",
+    "$inspector_protocol_dir/templates/TypeBuilder_h.template",
+  ]
+
+  deps = [
+    ":node_protocol_config",
+    ":node_protocol_json",
+  ]
+
+  args = [
+    "--jinja_dir",
+    rebase_path("//third_party/", root_build_dir),  # jinja is in chromium's third_party
+    "--output_base",
+    rebase_path("$target_gen_dir/src", root_build_dir),
+    "--config",
+    rebase_path("$target_gen_dir/node_protocol_config.json", root_build_dir),
+  ]
+
+  outputs =
+      get_path_info(rebase_path(rebase_path(_protocol_generated,
+                                            ".",
+                                            "$inspector_protocol_output/.."),
+                                ".",
+                                "$target_gen_dir/src"),
+                    "abspath")
+}
+
+template("generate_protocol_json") {
+  copy_target_name = target_name + "_copy"
+  copy(copy_target_name) {
+    sources = invoker.sources
+    outputs = [
+      "$target_gen_dir/{{source_file_part}}",
+    ]
+  }
+  copied_pdl = get_target_outputs(":$copy_target_name")
+  action(target_name) {
+    deps = [
+      ":$copy_target_name",
+    ]
+    sources = copied_pdl
+    outputs = invoker.outputs
+    script = "$inspector_protocol_dir/convert_protocol_to_json.py"
+    args = rebase_path(sources + outputs, root_build_dir)
+  }
+}
+
+copy("node_protocol_config") {
+  sources = [
+    "node_protocol_config.json",
+  ]
+  outputs = [
+    "$target_gen_dir/{{source_file_part}}",
+  ]
+}
+
+generate_protocol_json("node_protocol_json") {
+  sources = [
+    "node_protocol.pdl",
+  ]
+  outputs = [
+    "$target_gen_dir/src/node_protocol.json",
+  ]
+}
+
+generate_protocol_json("v8_protocol_json") {
+  sources = [
+    "//v8/include/js_protocol.pdl",
+  ]
+  outputs = [
+    "$target_gen_dir/js_protocol.json",
+  ]
+}
+
+action("concatenate_protocols") {
+  deps = [
+    ":node_protocol_json",
+    ":v8_protocol_json",
+  ]
+  inputs = [
+    "$target_gen_dir/js_protocol.json",
+    "$target_gen_dir/src/node_protocol.json",
+  ]
+  outputs = [
+    "$target_gen_dir/concatenated_protocol.json",
+  ]
+  script = "//v8/third_party/inspector_protocol/concatenate_protocols.py"
+  args = rebase_path(inputs + outputs, root_build_dir)
+}
+
+action("v8_inspector_compress_protocol_json") {
+  deps = [
+    ":concatenate_protocols",
+  ]
+  inputs = [
+    "$target_gen_dir/concatenated_protocol.json",
+  ]
+  outputs = [
+    "$target_gen_dir/v8_inspector_protocol_json.h",
+  ]
+  script = "../../tools/compress_json.py"
+  args = rebase_path(inputs + outputs, root_build_dir)
+}
diff --git a/src/node_version.h b/src/node_version.h
index aea46f3dad19d604d76b6726ce46141be48746c4..8620780de82f08940c40bddc449d281e4e348736 100644
--- a/src/node_version.h
+++ b/src/node_version.h
@@ -89,7 +89,10 @@
  * version matching should open a pull request to reserve a number in this
  * registry.
  */
+// Electron sets NODE_MODULE_VERSION in their GN configuration
+#ifndef NODE_MODULE_VERSION
 #define NODE_MODULE_VERSION 93
+#endif
 
 // The NAPI_VERSION provided by this version of the runtime. This is the version
 // which the Node binary being built supports.
diff --git a/tools/generate_gn_filenames_json.py b/tools/generate_gn_filenames_json.py
new file mode 100755
index 0000000000000000000000000000000000000000..87621ba1d7f1c80aadb81461824b0c2edab1de22
--- /dev/null
+++ b/tools/generate_gn_filenames_json.py
@@ -0,0 +1,75 @@
+#!/usr/bin/env python3
+import json
+import os
+import sys
+
+import install
+
+from utils import SearchFiles
+
+def LoadPythonDictionary(path):
+  file_string = open(path).read()
+  try:
+    file_data = eval(file_string, {'__builtins__': None}, None)
+  except SyntaxError as e:
+    e.filename = path
+    raise
+  except Exception as e:
+    raise Exception("Unexpected error while reading %s: %s" % (path, str(e)))
+
+  assert isinstance(file_data, dict), "%s does not eval to a dictionary" % path
+
+  return file_data
+
+
+FILENAMES_JSON_HEADER = '''
+// This file is automatically generated by generate_gn_filenames_json.py
+// DO NOT EDIT
+'''.lstrip()
+
+
+if __name__ == '__main__':
+  node_root_dir = os.path.dirname(os.path.dirname(__file__))
+  node_gyp_path = os.path.join(node_root_dir, 'node.gyp')
+  out = {}
+  node_gyp = LoadPythonDictionary(node_gyp_path)
+  node_lib_target = next(
+      t for t in node_gyp['targets']
+      if t['target_name'] == '<(node_lib_target_name)')
+  node_source_blocklist = {
+      '<@(library_files)',
+      '<@(deps_files)',
+      'common.gypi',
+      '<(SHARED_INTERMEDIATE_DIR)/node_javascript.cc',
+  }
+
+  def filter_v8_files(files):
+    if any(f.startswith('deps/v8/') for f in files):
+      files = [f.replace('deps/v8/', '//v8/', 1) for f in files]
+    return files
+
+  lib_files = SearchFiles('lib', 'js')
+  out['library_files'] = filter_v8_files(lib_files)
+  out['library_files'] += filter_v8_files(node_gyp['variables']['deps_files'])
+
+  blocklisted_sources = [
+      f for f in node_lib_target['sources']
+      if f not in node_source_blocklist]
+  out['node_sources'] = filter_v8_files(blocklisted_sources)
+
+  out['headers'] = []
+  def add_headers(files, dest_dir):
+    if 'src/node.h' in files:
+      files = [f for f in files if f.endswith('.h') and f != 'src/node_version.h']
+    elif any(f.startswith('../../v8/') for f in files):
+      files = [f.replace('../../v8/', '//v8/', 1) for f in files]
+    if files:
+      hs = {'files': sorted(files), 'dest_dir': dest_dir}
+      out['headers'].append(hs)
+
+  install.variables = {'node_shared_libuv': 'false'}
+  install.headers(add_headers)
+  with open(os.path.join(node_root_dir, 'filenames.json'), 'w') as f:
+    f.write(FILENAMES_JSON_HEADER)
+    f.write(json.dumps(out, sort_keys=True, indent=2, separators=(',', ': ')))
+    f.write('\n')
diff --git a/tools/generate_node_version_header.py b/tools/generate_node_version_header.py
new file mode 100755
index 0000000000000000000000000000000000000000..2a92eccfa582df361f2a889c0d9b32c1059baa7d
--- /dev/null
+++ b/tools/generate_node_version_header.py
@@ -0,0 +1,25 @@
+#!/usr/bin/env python3
+import re
+import sys
+
+node_version_file = sys.argv[1]
+out_file = sys.argv[2]
+NMV = None
+if len(sys.argv) > 3:
+  NMV = sys.argv[3]
+
+with open(node_version_file, 'r') as in_file, open(out_file, 'w') as out_file:
+  changed = False
+  contents = in_file.read()
+  new_contents = re.sub(
+    r'^#define NODE_MODULE_VERSION [0-9]+$',
+    '#define NODE_MODULE_VERSION ' + NMV,
+    contents,
+    flags=re.MULTILINE)
+
+  changed = contents != new_contents
+
+  if not changed and NMV is not None:
+    raise Exception("Did not modify the NMV from nodes value, this value MUST differ from node")
+
+  out_file.writelines(new_contents)
diff --git a/tools/install.py b/tools/install.py
index a6d1f8b3caa8e24148b1930ea109508f8e612735..c80c1b8202ba59bd63340baca36df8bca5e1f81d 100755
--- a/tools/install.py
+++ b/tools/install.py
@@ -202,17 +202,72 @@ def files(action):
 def headers(action):
   def wanted_v8_headers(files_arg, dest):
     v8_headers = [
-      'deps/v8/include/cppgc/common.h',
-      'deps/v8/include/libplatform/libplatform.h',
-      'deps/v8/include/libplatform/libplatform-export.h',
-      'deps/v8/include/libplatform/v8-tracing.h',
-      'deps/v8/include/v8.h',
-      'deps/v8/include/v8-internal.h',
-      'deps/v8/include/v8-platform.h',
-      'deps/v8/include/v8-profiler.h',
-      'deps/v8/include/v8-version.h',
-      'deps/v8/include/v8config.h',
+      '../../v8/include/cppgc/common.h',
+      '../../v8/include/libplatform/libplatform.h',
+      '../../v8/include/libplatform/libplatform-export.h',
+      '../../v8/include/libplatform/v8-tracing.h',
+      '../../v8/include/v8-array-buffer.h',
+      '../../v8/include/v8-callbacks.h',
+      '../../v8/include/v8-container.h',
+      '../../v8/include/v8-context.h',
+      '../../v8/include/v8-cppgc.h',
+      '../../v8/include/v8-data.h',
+      '../../v8/include/v8-date.h',
+      '../../v8/include/v8-debug.h',
+      '../../v8/include/v8-embedder-heap.h',
+      '../../v8/include/v8-embedder-state-scope.h',
+      '../../v8/include/v8-exception.h',
+      '../../v8/include/v8-extension.h',
+      '../../v8/include/v8-external.h',
+      '../../v8/include/v8-fast-api-calls.h',
+      '../../v8/include/v8-forward.h',
+      '../../v8/include/v8-function-callback.h',
+      '../../v8/include/v8-function.h',
+      '../../v8/include/v8-initialization.h',
+      '../../v8/include/v8-inspector-protocol.h',
+      '../../v8/include/v8-inspector.h',
+      '../../v8/include/v8-internal.h',
+      '../../v8/include/v8-isolate.h',
+      '../../v8/include/v8-json.h',
+      '../../v8/include/v8-local-handle.h',
+      '../../v8/include/v8-locker.h',
+      '../../v8/include/v8-maybe.h',
+      '../../v8/include/v8-memory-span.h',
+      '../../v8/include/v8-message.h',
+      '../../v8/include/v8-metrics.h',
+      '../../v8/include/v8-microtask-queue.h',
+      '../../v8/include/v8-microtask.h',
+      '../../v8/include/v8-object.h',
+      '../../v8/include/v8-persistent-handle.h',
+      '../../v8/include/v8-platform.h',
+      '../../v8/include/v8-primitive-object.h',
+      '../../v8/include/v8-primitive.h',
+      '../../v8/include/v8-profiler.h',
+      '../../v8/include/v8-promise.h',
+      '../../v8/include/v8-proxy.h',
+      '../../v8/include/v8-regexp.h',
+      '../../v8/include/v8-script.h',
+      '../../v8/include/v8-snapshot.h',
+      '../../v8/include/v8-statistics.h',
+      '../../v8/include/v8-template.h',
+      '../../v8/include/v8-traced-handle.h',
+      '../../v8/include/v8-typed-array.h',
+      '../../v8/include/v8-unwinder-state.h',
+      '../../v8/include/v8-unwinder.h',
+      '../../v8/include/v8-util.h',
+      '../../v8/include/v8-value-serializer-version.h',
+      '../../v8/include/v8-value-serializer.h',
+      '../../v8/include/v8-value.h',
+      '../../v8/include/v8-version-string.h',
+      '../../v8/include/v8-version.h',
+      '../../v8/include/v8-wasm-trap-handler-posix.h',
+      '../../v8/include/v8-wasm-trap-handler-win.h',
+      '../../v8/include/v8-wasm.h',
+      '../../v8/include/v8-weak-callback-info.h',
+      '../../v8/include/v8.h',
+      '../../v8/include/v8config.h'
     ]
+    v8_headers = [h.replace('deps/', '../../') for h in v8_headers]
     files_arg = [name for name in files_arg if name in v8_headers]
     action(files_arg, dest)
 
@@ -239,7 +294,7 @@ def headers(action):
   if sys.platform.startswith('aix'):
     action(['out/Release/node.exp'], 'include/node/')
 
-  subdir_files('deps/v8/include', 'include/node/', wanted_v8_headers)
+  subdir_files('../../v8/include', 'include/node/', wanted_v8_headers)
 
   if 'false' == variables.get('node_shared_libuv'):
     subdir_files('deps/uv/include', 'include/node/', action)
diff --git a/tools/js2c.py b/tools/js2c.py
index d93be2123e0f8c75dd6a0041ef164982db0860e4..4d9317527d46ac8c6d8066bfba707233053b8615 100755
--- a/tools/js2c.py
+++ b/tools/js2c.py
@@ -131,6 +131,14 @@ def NormalizeFileName(filename):
     split = split[1:]
   if len(split):
     filename = '/'.join(split)
+
+  # Electron-specific: when driving the node build from Electron, we generate
+  # config.gypi in a separate directory and pass the absolute path to js2c.
+  # This overrides the absolute path so that the variable names in the
+  # generated C are as if it was in the root node directory.
+  if filename.endswith("/config.gypi"):
+    filename = "config.gypi"
+
   return os.path.splitext(filename)[0]
 
 
diff --git a/tools/tar.py b/tools/tar.py
new file mode 100644
index 0000000000000000000000000000000000000000..eb697be25779db62c829aac45a509804e9fff331
--- /dev/null
+++ b/tools/tar.py
@@ -0,0 +1,12 @@
+import os
+import sys
+import tarfile
+
+source = sys.argv[1]
+target = sys.argv[2]
+
+os.chdir(os.path.dirname(source))
+
+tarball = tarfile.open(name=os.path.basename(target), mode='w:gz')
+tarball.add(os.path.relpath(source))
+tarball.close()
